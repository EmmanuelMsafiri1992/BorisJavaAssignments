# Recursive Functions in Java
## A Comprehensive Guide

---
# 1. Understanding Recursion
## Basic Concept
Recursion is a programming technique where a function calls itself to solve a larger problem by breaking it into smaller subproblems.

### Key Components of Recursion:
1. **Base Case**: The condition where recursion stops
2. **Recursive Case**: The condition where function calls itself
3. **Progress Toward Base Case**: Each recursive call should move closer to the base case

## Simple Example: Countdown
```java
public static void countdown(int n) {
    // Base case
    if (n <= 0) {
        System.out.println("Done!");
        return;
    }
    
    // Current step
    System.out.println(n);
    
    // Recursive case
    countdown(n - 1);  // Progress toward base case
}

// Usage:
// countdown(5) will print: 5, 4, 3, 2, 1, Done!
```

---
# 2. Factorial Calculation
## Understanding Factorial Recursion

```java
public static int factorial(int n) {
    // Base case
    if (n == 0 || n == 1) {
        return 1;
    }
    
    // Recursive case
    return n * factorial(n - 1);
}
```

### Execution Flow for factorial(4):
```
factorial(4)
→ 4 * factorial(3)
  → 3 * factorial(2)
    → 2 * factorial(1)
      → 1
    ← returns 2 * 1 = 2
  ← returns 3 * 2 = 6
← returns 4 * 6 = 24
```

---
# 3. Fibonacci Sequence
## Recursive Implementation

```java
public static int fibonacci(int n) {
    // Base cases
    if (n <= 1) {
        return n;
    }
    
    // Recursive case
    return fibonacci(n - 1) + fibonacci(n - 2);
}

// Improved version with memoization
public static long fibonacciMemo(int n, long[] memo) {
    if (memo[n] != 0) {
        return memo[n];
    }
    
    if (n <= 1) {
        return n;
    }
    
    memo[n] = fibonacciMemo(n - 1, memo) + fibonacciMemo(n - 2, memo);
    return memo[n];
}
```

### Visual Tree for fibonacci(4):
```
                  fib(4)
                /        \
            fib(3)      fib(2)
           /    \       /    \
        fib(2) fib(1) fib(1) fib(0)
        /    \
    fib(1) fib(0)
```

---
# 4. String Manipulation
## Example: Palindrome Check

```java
public static boolean isPalindrome(String str) {
    // Base cases
    if (str.length() <= 1) {
        return true;
    }
    
    // Compare first and last characters
    if (str.charAt(0) != str.charAt(str.length() - 1)) {
        return false;
    }
    
    // Recursive case: check remaining substring
    return isPalindrome(str.substring(1, str.length() - 1));
}

// Example usage:
// isPalindrome("radar") → true
// isPalindrome("hello") → false
```

## String Reversal
```java
public static String reverse(String str) {
    // Base case
    if (str.isEmpty() || str.length() == 1) {
        return str;
    }
    
    // Recursive case
    return reverse(str.substring(1)) + str.charAt(0);
}

// Example:
// reverse("hello") execution:
// reverse("ello") + "h"
// → (reverse("llo") + "e") + "h"
// → ((reverse("lo") + "l") + "e") + "h"
// → (((reverse("o") + "l") + "l") + "e") + "h"
// → ((("o" + "l") + "l") + "e") + "h"
// → "olleh"
```

---
# 5. Array Operations
## Binary Search Using Recursion

```java
public static int binarySearch(int[] arr, int target, int left, int right) {
    // Base case - element not found
    if (left > right) {
        return -1;
    }
    
    int mid = (left + right) / 2;
    
    // Base case - element found
    if (arr[mid] == target) {
        return mid;
    }
    
    // Recursive cases
    if (arr[mid] > target) {
        // Search left half
        return binarySearch(arr, target, left, mid - 1);
    } else {
        // Search right half
        return binarySearch(arr, target, mid + 1, right);
    }
}
```

## Array Sum
```java
public static int arraySum(int[] arr, int index) {
    // Base case
    if (index >= arr.length) {
        return 0;
    }
    
    // Recursive case
    return arr[index] + arraySum(arr, index + 1);
}
```

---
# 6. Tree Traversal
## Binary Tree Recursive Traversal

```java
class Node {
    int data;
    Node left, right;
    
    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class BinaryTree {
    // Inorder traversal
    public void inorder(Node node) {
        if (node == null) {
            return;
        }
        
        inorder(node.left);         // Process left subtree
        System.out.print(node.data); // Process current node
        inorder(node.right);        // Process right subtree
    }
    
    // Preorder traversal
    public void preorder(Node node) {
        if (node == null) {
            return;
        }
        
        System.out.print(node.data);
        preorder(node.left);
        preorder(node.right);
    }
    
    // Postorder traversal
    public void postorder(Node node) {
        if (node == null) {
            return;
        }
        
        postorder(node.left);
        postorder(node.right);
        System.out.print(node.data);
    }
}
```

---
# 7. Common Pitfalls and Best Practices

## Stack Overflow Prevention
```java
// Bad Practice - potential stack overflow
public static int badRecursion(int n) {
    return badRecursion(n - 1) + n; // No base case!
}

// Good Practice - with base case and validation
public static int goodRecursion(int n) {
    if (n < 0) {
        throw new IllegalArgumentException("Input must be non-negative");
    }
    if (n == 0) {
        return 0;
    }
    return goodRecursion(n - 1) + n;
}
```

## Memory Usage Optimization
```java
// Tail Recursion Example
public static int sumTail(int n, int accumulator) {
    if (n <= 0) {
        return accumulator;
    }
    return sumTail(n - 1, accumulator + n);
}

// Usage: sumTail(5, 0) instead of regular sum(5)
```

---
# 8. Practice Problems

1. **Tower of Hanoi**
```java
public static void towerOfHanoi(int n, char from, char to, char aux) {
    if (n == 1) {
        System.out.println("Move disk 1 from " + from + " to " + to);
        return;
    }
    
    towerOfHanoi(n - 1, from, aux, to);
    System.out.println("Move disk " + n + " from " + from + " to " + to);
    towerOfHanoi(n - 1, aux, to, from);
}
```

2. **Power Calculation**
```java
public static int power(int base, int exp) {
    if (exp == 0) {
        return 1;
    }
    if (exp == 1) {
        return base;
    }
    return base * power(base, exp - 1);
}
```

3. **GCD (Greatest Common Divisor)**
```java
public static int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}
```

Would you like me to:
1. Add more complex examples?
2. Include visualization for any specific concept?
3. Add exercises with solutions?
4. Explain any concept in more detail?